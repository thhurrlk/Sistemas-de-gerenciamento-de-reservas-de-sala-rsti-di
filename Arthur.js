
// ANALISE DO CODIGO DO RAFA! TENTANDO ACHAR UMA SOLUCAO PARA O PAINEL DE ADMIN

// DataBase / Banco de Dados, ou melhor dizendo, um  objeto com  uma  array chamada `quartos` dentro, a qual vai ter os quartos registrados.
const dbQuartos = {
    quartos: [{id: 1, tipo: 'Comum', descricao: 'Quarto Comum: Simples e confort√°vel.'},], // J√° iniciei aqui com  um quarto Comum, para alguns testes (tinha certo medo com rela√ß√£o aos IDS)
}

// Classe Quarto, n√≥s n√£o chegamos em classe ainda, mas essa a√≠ em quest√£o basicamente nos d√° a vantagem de poder "construir" com o `constructor` um quarto novo sempre que quisermos.
class Quarto {
    constructor(id, tipo, descricao) {
        this.id = id;
        this.tipo = tipo;
        this.descricao = descricao;
    }
}

// Menu b√°sico por meio de um prompt
var opcaoMenu = Number(
    prompt('Bem-vindo ao Hotel Suicidio Proibido! üíÄ \n\nDigite abaixo o que deseja fazer ou digite sair:\n\n1 - Reservar um quarto üõå\n2 - Relatar um problema üö®\n3 - Cometer suic√≠dio e pagar a multa no valor de R$999.999,00 ü©∏‚ö∞Ô∏èüí∏')
);

// As condicionais / if's, para que possamos acessar as diferentes fun√ß√µes desse menu
if (opcaoMenu == 1) {
    console.log('Aqui vai ser uma funcao');
}
else if(opcaoMenu == 2){
    console.log('Vamos fingir que voc√™ n√£o tentou fazer isso e privar-lhe da morte por enquanto.')
} 
// Nesse else if em espec√≠fico (C√≥digo 109 para acessar ele), n√≥s vamos rodar a fun√ß√£o `adicionarQuarto`, a qual explicarei em breve.
else if (opcaoMenu == 109) {
    adicionarQuarto()
} 
// ################################################################
else if (opcaoMenu == 3) {
    console.log('Voc√™ morreu e nos deve agora R$999.999,00');
} else {
    console.log('Seu suic√≠dio n√£o se conluir√° aqui, v√° embora!');
}


// Fun√ß√£o para adicionar um novo  quarto.
function adicionarQuarto(tipo = prompt('Digite  o  tipo de quarto desejado: VIP || COMUM')) // Esse prompt, por sua vez, preencher√° o par√¢metro `tipo`
{
    var descricao = ''; // Nesse  momento a  descri√ß√£o ainda √© inexistente
    switch (tipo) { // Um switch case, como j√° vimos nas aulas, √© um "sistema" condicional semelhante  ao if, se voc√™ digita algo especificado pelo `case`, algo acontecer√°.
        case 'VIP': // Aqui escolhemos o quarto VIP, que por sua vez altera a descri√ß√£o para a descri√ß√£o de um quarto VIP e quebra/para o switch case.
            descricao = 'Quarto VIP: Espa√ßoso, confort√°vel e com vista panor√¢mica.';
            break;
        case 'Comum': // Aqui ele define a descri√ß√£o de um quarto comum e para o switch case.
            descricao = 'Quarto Comum: Simples e confort√°vel.';
            break;
        default: // Aqui √© o `default`, que √© o que aparece quando o usu√°rio digita algo n√£o esperado.
            console.log('Tipo de quarto inv√°lido.');
            return;
    }
    
    const id = dbQuartos.quartos.length + 1; // Al√©m de definir a const ID para ser usada na classe. Essa pequena f√≥rmula adiciona mais um ID ao ID anterior, fazendo assim uma automatiza√ß√£o da cria√ß√£o de ID's dos quartos (se o tamanho atual da array √© 2, ou seja, existem 2 quartos, ent√£o criamos mais um ID, que por sua vez √© 1 inteiro maior ao tamanho/length anterior)
    const quarto = new Quarto(id, tipo, descricao); // Aqui ele define a const quarto, para que seja utilizada na classe, que "construir√°" o quarto com aquelas coisas j√° definidas na classe (id, tipo e descri√ß√£o...)
    dbQuartos.quartos.push(quarto); // Aqui ele acessa o objeto dbQuartos, depois acessa a array quartos, e por fim usa o m√©todo push para adicionar (quarto) √† array, tendo agora o nosso novo e adicionado quarto.
    console.log('Quarto adicionado com sucesso.'); // Console log com a mensagem de sucesso
}

console.log(dbQuartos) // Console log para testar como est√° a situa√ß√£o da database depois do ocorrido, com o objetivo de agora termos algo l√°.
